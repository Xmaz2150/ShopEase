SUMMARY OF WHAT I IMPLEMENTED THUS FAR :


1. Flask Application Setup:                                                                                                             
Initialized a Flask application with the basic structure and configuration.
Defined routes for user registration (/register), login (/login), and fetching products (/products).

2. Database Configuration:
Configured SQLAlchemy to use a PostgreSQL database (shop_ease).
Created the necessary database and user roles in PostgreSQL.

3. Database Models:
Defined models for the application using SQLAlchemy in models.py.
Created database tables using db.create_all().

4. Database Initialization:
Connected to the PostgreSQL database and created tables using Flaskâ€™s shell.

5.Running the Application:
Started the Flask development server to run the application locally.
Verified that the application is running on http://127.0.0.1:5000.
   
HOW IT WORKS:

1. Database Configuration:
Uses PostgreSQL for data storage.
The database connection URI and configuration are managed through environment variables in config.py.
SQLAlchemy is used for ORM (Object-Relational Mapping) to interact with the database.

2. Flask Application:
The Flask app is configured to handle routing and request processing.
routes.py defines the API endpoints and their logic.
models.py defines the database schema and interactions using SQLAlchemy.
JWT (JSON Web Token) is used for managing user authentication.

3. JWT Authentication:
JWTs are used to authenticate users and secure endpoints.
On successful login, a JWT is issued and should be included in the header for requests requiring authentication.

4. Running the Application:
The application is started using flask run, which starts a development server on http://127.0.0.1:5000.

WHAT NEEDS TO BE DONE NEXT:

1. Testing and verifying routes
2. unit tests
3. additiona features
4. error handling                                                                                 
